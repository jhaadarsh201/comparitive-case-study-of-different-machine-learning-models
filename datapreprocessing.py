# -*- coding: utf-8 -*-
"""datapreprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mn-AgC7qZW3Qs6C6Kh7xnvPIe6wkIKaX
"""

!pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

# fetch dataset
heart_disease = fetch_ucirepo(id=45)

# data (as pandas dataframes)
X = heart_disease.data.features
y = heart_disease.data.targets

# metadata
print(heart_disease.metadata)

# variable information
print(heart_disease.variables)

df = heart_disease.data.original

df

df.to_csv("heart_disease.csv",index=False)

df = df.dropna()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


correlation_matrix = df.corr()

# Plot the correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

df['num'].value_counts()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df)
plt.xticks(rotation=45)  # Rotate x-axis labels for better visibility
plt.xlabel('Columns', fontsize=12)  # Set x-axis label and adjust font size
plt.ylabel('Values', fontsize=12)  # Set y-axis label and adjust font size
plt.title('Boxplot of DataFrame Columns', fontsize=14)  # Set title and adjust font size
plt.tight_layout()  # Adjust layout to improve spacing
plt.show()

df['num'].value_counts()

df

number_to_string = {
    0   : "0",
    1   : "1",
    2   : "2",
    3   : "3",
    4   : "4"
}

df['numS'] = df['num'].map(number_to_string)

df

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

# Assuming df is your pandas DataFrame containing the dataset

# Separate features (X) and target variable (y)
X = df.drop(columns=['numS'])
y = df['numS']

# Create and train the decision tree classifier
clf = DecisionTreeClassifier(criterion='entropy')  # ID3 algorithm uses entropy
clf.fit(X, y)

# Plot the decision tree
plt.figure(figsize=(12, 8))
plot_tree(clf, feature_names=X.columns, class_names=df['numS'].unique(), filled=True)
plt.show()

plt.figure(figsize=(14, 10))  # Adjust figure size
plot_tree(clf,
          feature_names=X.columns,
          class_names=df['numS'].unique(),
          filled=True,
          rounded=True,  # Rounded corners for nodes
          fontsize=10,   # Adjust font size
          max_depth=3,   # Limit depth for better visualization
          impurity=True, # Show impurity at each node
          proportion=False,  # Show raw counts at each node
          precision=2,   # Precision of displayed impurity
          label="all",   # Show all classes for multiclass problems
          )
plt.show()

def get_label(node):
    if node.n_node_samples < 5:  # Show raw counts if node sample size is less than 5
        label = f"Samples: {node.n_node_samples}"
    else:
        label = f"Class: {df['numS'].unique()[node.value[0].argmax()]}"
    return label

plt.figure(figsize=(12, 8))
plot_tree(clf,
          feature_names=X.columns,
          class_names=df['numS'].unique(),
          filled=True,
          impurity=False,  # Do not display impurity
          proportion=False,  # Do not display proportion
          node_ids=False,  # Do not display node IDs
          label="all",  # Show all classes for multiclass problems
          precision=0,  # No decimals
          max_depth=None,  # Show full tree
          fontsize=10,  # Adjust font size
          )

plt.show()

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

# Assuming df is your pandas DataFrame containing the dataset

# Separate features (X) and target variable (y)
X = df.drop(columns=['numS'])
y = df['numS']

# Create and train the decision tree classifier
clf = DecisionTreeClassifier()  # By default, this will use CART algorithm
clf.fit(X, y)

# Plot the decision tree
plt.figure(figsize=(12, 8))
plot_tree(clf, feature_names=X.columns, class_names=df['numS'].unique(), filled=True)
plt.show()

import matplotlib.pyplot as plt

# Data
sizes = [160, 54, 35, 35, 13]
labels = ['1', '2', '3', '4', '5']

# Plot
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.title('Pie Chart')
plt.show()

